<?php
/**
 * @file
 * Metro specific Islandora functionality.
 */

/**
 * Implements hook_CMODEL_PID_islandora_overview_object().
 */
function metrodora_islandora_collectionCModel_islandora_overview_object(AbstractObject $object) {
  $total_results = 0;
  $rows = array();
  $model_query = metrodora_get_all_objects_query_info(array(
    'object' => $object,
    'page_size' => -1,
    'page_number' => 0,
    'vars' => '?model',
    'order_by' => FALSE,
  ));
  $models = (array) $object->repository->ri->query($model_query['query'], $model_query['type']);
  $ignore_models = array(
    'fedora-system:FedoraObject-3.0',
  );
  foreach ($models as $model) {
    $model_pid = $model['model']['value'];
    if (in_array($model_pid, $ignore_models)) {
      continue;
    }
    $model_count_query = metrodora_get_all_objects_query_info(array(
      'object' => $object,
      'page_size' => -1,
      'page_number' => 0,
      'order_by' => FALSE,
      'model' => "<info:fedora/$model_pid>",
    ));
    $model_object = islandora_object_load($model_pid);
    if (variable_get('islandora_basic_collection_disable_count_object', FALSE)) {
      $rows[$model_pid] = array(
        ($model_object ?
          l($model_object->label, "islandora/object/{$model_object->id}") :
          $model_pid),
      );
    }
    else {
      $model_count = $object->repository->ri->countQuery($model_count_query['query'], $model_count_query['type']);
      $total_results += $model_count;
      $rows[$model_pid] = array(
        ($model_object ?
          l($model_object->label, "islandora/object/{$model_object->id}") :
          $model_pid),
        $model_count,
      );
    }
  }

  $content = array(
    'total' => array(
      '#markup' => t('Total members: %total', array('%total' => $total_results)),
      '#weight' => 9,
    ),
    'table' => array(
      '#theme' => 'table',
      '#header' => array(
        'type' => array('data' => t('Type')),
        'count' => array('data' => t('Count')),
      ),
      '#rows' => $rows,
      '#empty' => t('Collection is empty.'),
      '#weight' => 10,
    ),

  );
  if (variable_get('islandora_basic_collection_disable_count_object', FALSE)) {
    unset($content['total']);
    unset($content['table']['#header']['count']);
  }
  return array(
    'metro_count' => array(
      '#markup' => drupal_render($content),
      '#weight' => 10,
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_overview_object_alter().
 */
function metrodora_islandora_collectionCModel_islandora_overview_object_alter(AbstractObject $object, &$output) {
  // Modify the collection markup to say that these counts are only for visible
  // objects.
  $output['collection']['#markup'] = str_replace(t('Total members'), t('Total visible members'), $output['collection']['#markup']);
}

/**
 * Metro's awesomely custom display of everything without FILTERs.
 *
 * @note This is a lot of copypasta, apologies but Metro wants it.
 *
 * @see islandora_basic_collection_get_query_info()
 *
 * @throws Exception if the object parameter is not set.
 *
 * @param array $params
 *   An array containing all the parameters, at least:
 *   - object: An AbstractObject we're querying for.
 *   but may also contain:
 *   - page_size: The size of the page/number of results to return. Defaults to
 *   10.
 *   - page_number: An integer representing the offset as a multiple of
 *   page_size. Defaults to 0.
 *   - vars: A string containing the list of variables to select. Defaults to
 *   "?object ?title".
 *   - order_by: A string indicating which variable by which to sort. Defaults
 *   to "?title". May be set to FALSE to avoid sorting.
 *   - model: A string representing a URI. Defaults to "?model". Could be
 *   provided as "<info:fedora/cmodel:pid>" if the type of object to query
 *   should be filtered.
 * @param string $type
 *   Either 'view' or 'manage', its meant to repersent how the objects will be
 *   used.
 *
 * @return array
 *   An array containing a number of keys used to describe the query,
 *   including all the values from $params (which haven't been unset in the
 *   alter), in addition to:
 *   - query: The actual query string.
 *   - type: A string containing the type of query, likely one of:
 *   - itql; or,
 *   - sparql.
 *   - pid: The pid of the collection being queried.
 */
function metrodora_get_all_objects_query_info(array $params, $type = 'view') {
  if (!isset($params['object'])) {
    throw new Exception(t('!function requires "!object_parameter" to be given in the array of parameters.', array(
      '!function' => __FUNCTION__,
      '!object_parameter' => 'object',
    )));
  }

  // Add in defaults.
  $params += array(
    'page_number' => 0,
    'page_size' => 10,
    'vars' => '?object ?title ?owner ?date_modified',
    'order_by' => '?title',
    'model' => '?model',
  );

  $object = $params['object'];

  $query = <<<EOQ
SELECT DISTINCT !vars
FROM <#ri>
WHERE {
!statements .
}
EOQ;

  $query_statements = module_invoke_all('islandora_basic_collection_get_query_statements', $type);
  $query = format_string($query, array(
    '!statements' => implode(' . ', $query_statements),
    '!vars' => $params['vars'],
  ));
  $query = format_string($query, array(
    '!pid' => $object->id,
    '!model' => $params['model'],
  ));

  if ($params['order_by']) {
    $query .= <<<EOQO
ORDER BY {$params['order_by']}
EOQO;
  }

  $query_array = $params + array(
    'query' => $query,
    'type' => 'sparql',
    'pid' => $object->id,
  );
  return $query_array;
}

/**
 * Implements hook_islandora_oai_get_xsl_files().
 */
function metrodora_islandora_oai_get_xsl_files() {
  $files = file_scan_directory(drupal_get_path('module', 'metrodora') . '/transforms/', '/.*\.xslt?$/');

  $transform_options = array();

  foreach ($files as $file) {
    $transform_options[$file->uri] = $file->filename;
  }

  return $transform_options;
}

/**
 * Implements hook_islandora_oai_self_transform_params().
 */
function metrodora_islandora_oai_self_transform_params($islandora_object, $metadata_prefix) {
  $url = url("islandora/object/{$islandora_object->id}", array(
    'absolute' => TRUE,
    'language' => NULL,
  ));

  return array(
    '' => array('resource_url' => $url),
  );
}

/**
 * Implements hook_menu().
 */
function metrodora_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/compound-parent-metadata'] = array(
    'title' => 'Object Description',
    'page callback' => 'metrodora_compound_parent_metadata',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'metrodora_compound_parent_metadata_access',
    'access arguments' => array(2),
    'file' => 'includes/metadata.inc',
    'weight' => 1,
  );
  $items['islandora/object/%islandora_object/compound-child-metadata'] = array(
    'title' => 'Item Description',
    'page callback' => 'metrodora_compound_child_metadata',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'metrodora_compound_child_metadata_access',
    'access arguments' => array(2),
    'file' => 'includes/metadata.inc',
    'weight' => 2,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function metrodora_menu_alter(&$items) {
  $items['islandora/object/%islandora_object/manage']['weight'] = 4;
  if (isset($items['islandora/object/%islandora_object/ip_embargo'])) {
    $items['islandora/object/%islandora_object/ip_embargo']['weight'] = 3;
  }
}

/**
 * Implements hook_form_alter().
 */
function metrodora_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'xml_form_builder_edit_datastream_form' || $form_id == 'xml_form_builder_ingest_form' && isset($form['#title']) && $form['#title'] == 'METRO MODS Form') {
    module_load_include('inc', 'islandora', 'includes/utilities');

    if ($form_id === 'xml_form_builder_ingest_form') {
      module_load_include('inc', 'islandora', 'includes/ingest.form');
      $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
      $object = $shared_storage['parent'];
      $namespace = islandora_get_namespace($object);
      $elements_to_enable = metrodora_build_variable_elements_array($form);
      metrodora_modify_namespace_specific_fields($form, $elements_to_enable, $namespace);
    }
    else {
      // Check if "update" is set so we only modify the second step on editing
      // a MODS form.
      if (isset($form['update'])) {
        $object = menu_get_object('islandora_object', 2);
        if ($object) {
          $namespace = islandora_get_namespace($object);
          $elements_to_enable = metrodora_build_variable_elements_array($form);
          metrodora_modify_namespace_specific_fields($form, $elements_to_enable, $namespace);
        }
      }
    }
  }
}

/**
 * Access callback for viewing parent metadata tab.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can see the tab, FALSE otherwise.
 */
function metrodora_compound_parent_metadata_access(AbstractObject $object) {
  $compound_info = islandora_compound_object_retrieve_compound_info($object);
  return $compound_info || in_array('islandora:compoundCModel', $object->models);
}

/**
 * Access callback for viewing child metadata tab.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can see the tab, FALSE otherwise.
 */
function metrodora_compound_child_metadata_access(AbstractObject $object) {
  $children = islandora_compound_object_get_parts($object);
  $pid = (!empty($children)) ? $children[0] : $object->id;
  $compound_object = islandora_object_load($pid);
  return islandora_compound_object_retrieve_compound_info($compound_object);
}

/**
 * Build up elements to enable for repeatable fields like Tags and Tabs.
 *
 * @param array $form
 *   An array representing a form within Drupal.
 * @param bool|string $field_key
 *   FALSE if the form itself is being iterated on, a string representation of
 *   the field otherwise.
 *
 * @return array
 *   An array containing references to form elements to be enabled.
 */
function metrodora_build_repeatable_element_array(&$form, $field_key = FALSE) {
  $elements = array();

  foreach (element_children($form) as $key) {
    if ($field_key) {
      $elements[] = &$form[$key][$field_key];
    }
    else {
      $elements[] = &$form[$key];
    }
  }
  return $elements;
}

/**
 * Modifies fields specific to namespaces for METRO's MODS form.
 *
 * @param array $form
 *   An array representing a form within Drupal.
 * @param array $elements_to_enable
 *   An array containing references to form elements to be enabled
 * @param string $namespace
 *   A string holding the namespace of the collection being ingested into.
 */
function metrodora_modify_namespace_specific_fields(&$form, &$elements_to_enable, $namespace) {
  if (isset($elements_to_enable[$namespace])) {
    foreach ($elements_to_enable[$namespace] as &$element) {
      $element['#access'] = TRUE;
    }
  }
  // Handle collection specific options adding of options.
  if ($namespace == 'murrayhill') {
    $notes = metrodora_build_repeatable_element_array($form['notes']);
    foreach ($notes as &$element) {
      $element['type']['#options']['provenance'] = t('Provenance');
    }
    unset($element);
  }
  elseif ($namespace == 'waterways') {
    $notes = metrodora_build_repeatable_element_array($form['notes']);
    foreach ($notes as &$element) {
      $element['type']['#options']['publishinginfo'] = t('Publishing Info');
    }
    unset($element);
  }
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function metrodora_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'metrodora');
  return array(
    'METRO MODS Form' => array(
      'form_file' => "$module_path/xml/metro_mods_form.xml",
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function metrodora_islandora_xml_form_builder_form_associations() {
  $to_return = array();
  $base_array = array(
    'form_name' => 'METRO MODS Form',
    'dsid' => 'MODS',
    'title_field' => array('titleInfo', '0', 'title'),
    'template' => FALSE,
    'transform' => 'No Transform',
  );

  $associations = array(
    'metro_compound_mods_form' => 'islandora:compoundCModel',
    'metro_image_mods_form' => 'islandora:sp_basic_image',
    'metro_large_image_mods_form' => 'islandora:sp_large_image_cmodel',
    'metro_pdf_mods_form' => 'islandora:sp_pdf',
  );
  foreach ($associations as $key => $content_model) {
    $to_return[$key] = $base_array + array('content_model' => $content_model);
  }
  return $to_return;
}

/**
 * Helper function to build up references to elements to enable.
 *
 * @param array $form
 *   An array containing the Drupal form.
 *
 * @return array
 *   An array where the keys are the namespace and the values are the
 *   references to the elements we are to enable.
 */
function metrodora_build_variable_elements_array(&$form) {
  $elements_to_enable = array(
    'murrayhill' => array(
      &$form['subject']['hierarchicalGeographicFieldset'],
      &$form['subject']['hierarchicalGeographicFieldset']['citySection'],
      &$form['subject']['cartographicsFieldset'],
      &$form['subject']['cartographicsFieldset']['coordinates'],
    ),
    'zoomaps' => array(
      &$form['subject']['cartographicsFieldset'],
      &$form['subject']['cartographicsFieldset']['scale'],
    ),
    'bronxpark' => array(
      &$form['relatedItemFieldset']['relatedSeries'],
    ),
    'albadigitallibrary' => array(
      &$form['relatedItemFieldset']['relatedNote'],
      &$form['relatedItemFieldset']['relatedSource'],
    ),
    'bklynsheetmusic' => array(
      &$form['relatedItemFieldset']['relatedResource'],
    ),
    'cuny34thstreet' => array(
      &$form['relatedItemFieldset']['appearsIn'],
    ),
    'snugharbor' => array(
      &$form['relatedItemFieldset']['appearsIn'],
    ),
    'lesbianherstory' => array(),
    'bronxchildhood' => array(
      &$form['relatedItemFieldset']['relatedExhibit'],
    ),
    'childhoodinbronx' => array(
      &$form['relatedItemFieldset']['relatedExhibit'],
    ),
    'bronxpark' => array(
      &$form['relatedItemFieldset']['relatedSeries'],
    ),
  );
  // Get all repeatable elements that are tab panels that need to be
  // modified.
  $display_label = metrodora_build_repeatable_element_array($form['notes'], 'displayLabel');
  if (!empty($display_label)) {
    $elements_to_enable['cuny34thstreet'] = array_merge($elements_to_enable['cuny34thstreet'], $display_label);
    $elements_to_enable['snugharbor'] = array_merge($elements_to_enable['snugharbor'], $display_label);
  }
  $type = metrodora_build_repeatable_element_array($form['description'], 'type');
  if (!empty($type)) {
    $elements_to_enable['lesbianherstory'] = array_merge($elements_to_enable['lesbianherstory'], $type);
  }
  return $elements_to_enable;
}

/**
 * Implemenets hook_CMODEL_pid_islandora_view_object_alter().
 */
function metrodora_islandora_view_object_alter(&$object, &$rendered) {
  if (metrodora_compound_child_metadata_access($object)) {
    // We'll assume that the empty string is the solution pack markup.
    $markup = new DOMDocument('1.0', 'utf-8');
    $markup->loadHTML($rendered['']['#markup']);
    $xpath = new DOMXpath($markup);
    $result = $xpath->query('//fieldset[@class="islandora islandora-metadata collapsible collapsed"]');
    // Should only be one of these.
    $parent_node = FALSE;
    foreach ($result as $yum) {
      $parent_node = $yum->parentNode;
      $parent_node->removeChild($yum);
      break;
    }
    if ($parent_node) {
      $rendered['']['#markup'] = $parent_node->ownerDocument->saveHTML();
    }
  }
}
